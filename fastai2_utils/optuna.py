# AUTOGENERATED! DO NOT EDIT! File to edit: nbs/04_optuna.ipynb (unless otherwise specified).

__all__ = ['get_latest_metric_val', 'OptunaPruningCallback']

# Cell
from fastai2.basics import *
from fastai2.callback.tracker import TrackerCallback

import optuna
from optuna.trial import Trial

# Cell
def get_latest_metric_val(recorder: Recorder, monitor='valid_loss'):
    idx = list(recorder.metric_names[1:]).index(monitor)
    val = recorder.values[-1][idx]
    return val

# Cell
class OptunaPruningCallback(Callback):
    def __init__(self, trial: Trial, monitor='valid_loss'):
        self.trial = trial
        self.monitor = monitor
    def after_epoch(self):
        val = get_latest_metric_val(self.recorder, self.monitor)
        self.trial.report(float(val), step=self.epoch)
        if self.trial.should_prune():
            message = 'Trial was pruned at epoch {}.'.format(self.epoch)
            raise optuna.exceptions.TrialPruned(message)